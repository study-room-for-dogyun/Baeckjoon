# 문제 설명
# 당신은 스마트폰 어플리케이션을 이용하여 공부한 시간을 기록하려합니다. 어플리케이션의 기능은 다음과 같습니다.
#
# 시작 버튼: 공부를 시작할 때의 시각을 기록합니다.
# 중지 버튼: 공부를 중지할 때의 시각을 기록합니다.
# 하지만, 어플리케이션에 기록된 시간에 항상 공부만 했다는 보장이 없기 때문에 다음과 같은 규칙을 적용해 실제로 공부한 시간을 구하려 합니다.
#
# 공부를 시작하고 5분이 지나기 전에 중지했다면 실제로 공부한 시간에 포함시키지 않습니다.
# 공부를 시작하고 1시간 45분이 넘어서 중지했다면 1시간 45분까지만 공부한 시간으로 인정합니다.
# 공부를 시작한 시각과 중지한 시각이 연속적으로 주어집니다. 처음 주어진 시각은 무조건 공부를 시작한 시각이며, 마지막 시각은 무조건 공부를 중지한 시각입니다. 차례대로 번갈아가면서 [시작 시각, 중지 시각, 시작 시각, 중지 시각, ..., 중지 시각] 형태로 주어집니다. 이때 실제로 공부한 시간을 구하려 합니다.
#
# 어플리케이션의 기록을 담은 문자열 배열 log가 매개변수로 주어졌을 때, 실제로 공부한 시간을 HH:MM 형태로 return 하도록 solution 함수를 완성해주세요.
#
# HH:MM형태는 시:분을 뜻합니다. 이때 시혹은 분이 한 자리 수라면 왼쪽에 0을 채워 항상 두 자리가 되게 합니다.
# 제한사항
# log의 길이는 짝수입니다.
# 2 ≤ log의 길이 ≤ 1,440
# log의 원소는 시각을 나타내며 길이는 항상 5입니다.
# 시각은 항상 시:분을 뜻하는 HH:MM 형태로 주어집니다.
# 잘못된 시각은 주어지지 않습니다.
# 중복된 시각은 주어지지 않습니다.
# 시각은 오름차순으로 주어지며, 모두 같은 날 기록한 내용만 주어집니다.
# 입출력 예
# log	result
# ["08:30", "09:00", "14:00", "16:00", "16:01", "16:06", "16:07", "16:11"]	"02:20"
# ["01:00", "08:00", "15:00", "15:04", "23:00", "23:59"]	"02:44"
# 입출력 예 설명
# 입출력 예 #1
#
# 어플리케이션의 기록을 가지고 공부한 시간을 나타내면 다음과 같습니다.
#
# 08:30 ~ 09:00, 14:00 ~ 16:00, 16:01 ~ 16:06, 16:07 ~ 16:11
#
# 규칙에 따라 실제로 공부한 시간을 구하는 과정은 다음과 같습니다.
#
# 공부한 시각(시작 ~ 끝)	공부한 시간(분)	실제로 공부한 시간(분)
# 08:30 ~ 09:00	30	30
# 14:00 ~ 16:00	120	105
# 16:01 ~ 16:06	5	5
# 16:07 ~ 16:11	4	0
# 따라서 실제로 공부한 시간은 30 + 105 + 5 + 0 = 140분이고, 140분은 2시간 20분이므로 "02:20"을 return 해야 합니다.
#
# 입출력 예 #2
#
# 공부한 시각(시작 ~ 끝)	공부한 시간(분)	실제로 공부한 시간(분)
# 01:00 ~ 08:00	420	105
# 15:00 ~ 15:04	4	0
# 23:00 ~ 23:59	59	59
# 따라서 실제로 공부한 시간은 105 + 0 + 59 = 164분이고, 164분은 2시간 44분이므로 "02:44"을 return 해야 합니다.

def solution(log):
    answer = ''

    temp = 0

    for i in range(0, len(log), 2):

        s = log[i].split(':')
        e = log[i + 1].split(':')

        start = int(s[0]) * 60 + int(s[1])
        end = int(e[0]) * 60 + int(e[1])

        time = end - start
        if time < 5:
            temp += 0
        elif time >= 105:
            temp += 105
        else:
            temp += time

    answer = str(temp // 60).zfill(2) + ':' + str(temp % 60).zfill(2)

    return answer